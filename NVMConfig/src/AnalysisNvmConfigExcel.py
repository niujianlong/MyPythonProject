#!/usr/bin/python
# -*- coding:utf8 -*-
'''
Created on 2016年10月1日

@author: niujianlong
'''
import sys
import xlrd
import datetime

# the global variable define

# resource file define
NVM_Table_Dir = './../res/NVM_Table.xlsx'
sheetName = ['ConstNvmMapSection', \
             'VariableNvmMapSection', \
             'FblNvmMapSection', \
             'DtcNvmMapSection', \
             'OdoNvmMapSection']
excel = xlrd.open_workbook(NVM_Table_Dir)
# resource row and col define
StartOffsetRow = 1
StartOffsetCol = 2
SectionSizeRow = 2
SectionSizecol = 2

NVMMapIdStartRow = 6
NVMMapIdCol = 1

NVMMapTypeStartRow = 6
NVMMapTypeCol = 2

NVMMapResetLevelStartRow = 6
NVMMapResetLevelCol = 3

NVMMapDefaultValueStartRow = 6
NVMMapDefaultValueCol = 4
#
# generation file define
NVM_Cfg_Dir = './../gen/NVM_Cfg.h'
NVM_Cfg_filename = 'NVM_Cfg.h'
NVM_Cfg = file(NVM_Cfg_Dir, 'w+')


def WriteNowTime():
    now = datetime.datetime.now()
    return now.strftime("%Y-%m-%d %H:%M:%S")

def GenCommonAnnotation(File, filename):
    File.write('/*****************************************************************************\n')
    File.write('**  Project       BAIC C51E Cluster Project\n')
    File.write('**  (c) copyright ' + datetime.datetime.now().strftime("%Y") + '\n')
    File.write('**  Company       O-film\n')
    File.write('**                All rights reserved\n')
    File.write('**  Secrecy Level STRICTLY CONFIDENTIAL\n')
    File.write('*******************************************************************************\n')
    File.write('**\n')
    File.write('**          File  : ' + filename + '\n')
    File.write('**          Author: niujianlong\n')
    File.write('**\n')
    File.write('**          Date  : ' + WriteNowTime() + '\n')
    File.write('**          Description: modified by the open software\n')
    File.write('**          Warning :This file generated by tool don\'t modify it manually.\n')
    File.write('**          version: V_0_1\n')
    File.write('**\n')
    File.write('******************************************************************************/\n')
    

def GetNVMStartOffset(sheetName, StartOffsetRow, StartOffsetCol):
    sheet = excel.sheet_by_name(sheetName)
    offsetStr = str(sheet.cell(StartOffsetRow, StartOffsetCol).value)
    offsetStrList = offsetStr.split('+')
    sumValue = 0
    for i in offsetStrList:
        sumValue = sumValue + int(float(i))
    return sumValue
    
def GetNVMSectionSize(sheetName, StartOffsetRow, StartOffsetCol):
    return GetNVMStartOffset(sheetName, StartOffsetRow, StartOffsetCol)

def GetNVMMapID(sheetName, row, col):
    sheet = excel.sheet_by_name(sheetName)
    return str(sheet.cell(row, col).value)

def GetNVMMapType(sheetName, row, col):
    sheet = excel.sheet_by_name(sheetName)
    return str(sheet.cell(row, col).value)

def GetNVMMapDefaultValue(sheetName, row, col):
    sheet = excel.sheet_by_name(sheetName)
    return str(sheet.cell(row, col).value)

def int32int16Toint8(num, size):
    if size == 2:
        return str(str(hex(int(eval(num)) & 0xff)) + ',' + str(hex((int(eval(num)) & 0xff00) >> 8)))
    elif size == 4:
        return str(str(hex(int(eval(num)) & 0xff)) + ',' \
              + str(hex((int(eval(num)) & 0xff00) >> 8)) + ','\
              + str(hex((int(eval(num)) & 0xff0000) >> 16)) + ','\
              + str(hex((int(eval(num)) & 0xff000000) >> 24))[:-1])
    else:
        print 'the argv size is illegal'
        sys.exit(-1)
        
def StringToASCII(string):
    unicodeValue = string.decode('utf-8')
    if len(unicodeValue) == len(string):
        return map(ord, string)
    else:
        print 'the string include illegal ASCII code'
        sys.exit(-1)  
             
def CalcTypeSize(Type):
    BasicTypeEnum = ['int8', 'int16', 'int32', 'string']
    TypePartList = Type.split('[')
    if TypePartList[0] not in BasicTypeEnum:
        print 'The type value is illegal'
        sys.exit(-1)
    else:
        if  TypePartList[0] == BasicTypeEnum[0] or TypePartList[0] == BasicTypeEnum[3]:
            if  len(TypePartList) == 1:
                return 1
            else:
                return 1 * int(TypePartList[1].split(']')[0])
        elif  TypePartList[0] == BasicTypeEnum[1]:
            if  len(TypePartList) == 1:
                return 2
            else:
                return 2 * int(TypePartList[1].split(']')[0])    
        elif  TypePartList[0] == BasicTypeEnum[2]:
            if  len(TypePartList) == 1:
                return 4
            else:
                return 4 * int(TypePartList[1].split(']')[0])    
        else:
            print 'Typr Error'
            sys.exit(-1)    
def WriteNVMMapID(File):
    File.write('#define NVM_ID_LIST           \\\n')
    for sheetNam in sheetName:
        # print sheetNam
        File.write('/*the MAP ID in ' + sheetNam + ' list*/\\\n')
        row = NVMMapIdStartRow
        try:
            while GetNVMMapID(sheetNam, row, NVMMapIdCol) != '':
                File.write('        ' + GetNVMMapID(sheetNam, row, NVMMapIdCol) + ',    \\\n')
                row = row + 1
        except IndexError:
            continue  
        
def WriteDefaultValue(File):  
    File.write('#define NVM_DEFAULT_VALUES           \\\n')
    for sheetNam in sheetName:
        File.write('/*the NVM Default Value in ' + sheetNam + ' Section*/\\\n')
        row = NVMMapIdStartRow
        try:
            while GetNVMMapID(sheetNam, row, NVMMapIdCol) != '':
                BasicTypeEnum = ['int8', 'int16', 'int32', 'string']
                Type = GetNVMMapType(sheetNam, row, NVMMapTypeCol)
                DefaultValue = GetNVMMapDefaultValue(sheetNam, row, NVMMapDefaultValueCol)
                ValueSize = CalcTypeSize(Type)
                MapID = GetNVMMapID(sheetNam, row, NVMMapIdCol)
                TypePartList = Type.split('[')
                if TypePartList[0] not in BasicTypeEnum:
                    print 'The type value is illegal'
                    sys.exit(-1)
                    '''
                if Type in BasicTypeEnum:
                    if Type == BasicTypeEnum[0]:
                        File.write('{'+hex(int(float(DefaultValue)))+'},    /*'+MapID+'*/    \\\n')
                    elif Type == BasicTypeEnum[1] or Type == BasicTypeEnum[2]:
                        File.write('{'+int32int16Toint8(DefaultValue,ValueSize)+'},    /*'+MapID+'*/    \\\n')  
                    else:
                        pass
                        
                else:'''
                if TypePartList[0] == BasicTypeEnum[0]:
                    File.write('{')
                    for DefaultValue in DefaultValue:
                        File.write(DefaultValue) 
                    File.write('},    /*the default for ' + MapID + '*/    \\\n') 
                elif TypePartList[0] == BasicTypeEnum[1] :
                    File.write('{')
                    for DefaultValue in DefaultValue:
                        File.write(int32int16Toint8(DefaultValue, 2)) 
                    File.write('},    /*the default for ' + MapID + '*/    \\\n') 
                elif TypePartList[0] == BasicTypeEnum[2]:
                    File.write('{')
                    for DefaultValue in DefaultValue:
                        File.write(int32int16Toint8(DefaultValue, 4)) 
                    File.write('},    /*the default for ' + MapID + '*/    \\\n') 
                elif Type == BasicTypeEnum[3]:
                    File.write('{')
                    ASCIIList = StringToASCII(DefaultValue)
                    for ASCIIElem in ASCIIList:
                        File.write(str(ASCIIElem) + ',')  
                    File.write('},    /*the default for ' + MapID + '*/    \\\n')           
                row = row + 1
        except IndexError:
            continue  
def main():
    GenCommonAnnotation(NVM_Cfg, NVM_Cfg_filename)
    WriteNVMMapID(NVM_Cfg)
    WriteDefaultValue(NVM_Cfg)



if __name__ == '__main__':
    main()
    # print int(eval('256.0'))
    # print int32int16Toint8('0x6', 4)
    # print map(ord, 'hello,world')
