#!/usr/bin/python
# -*- coding:utf8 -*-
'''
Created on 2016年10月1日

@author: niujianlong
'''
import sys
import xlrd
import xlwt
import datetime

# the global variable define

# resource file define
NVM_Table_Dir = './../res/NVM_Table.xlsx'
sheetName = ['ConstNvmMapSection', \
             'VariableNvmMapSection', \
             'FblNvmMapSection', \
             'DtcNvmMapSection', \
             'OdoNvmMapSection']
excel = xlrd.open_workbook(NVM_Table_Dir)
# resource row and col define
StartOffsetRow = 1
StartOffsetCol = 2
SectionSizeRow = 2
SectionSizecol = 2

NVMMapIdStartRow = 6
NVMMapIdCol = 1

NVMMapTypeStartRow = 6
NVMMapTypeCol = 2

NVMMapResetLevelStartRow = 6
NVMMapResetLevelCol = 3

NVMMapDefaultValueStartRow = 6
NVMMapDefaultValueCol = 4

Each_Section_Actual_Size = []

#
# generation file define
NVM_Cfg_Dir = './../gen/NVM_Cfg.h'
NVM_Cfg_filename = 'NVM_Cfg.h'
NVM_Cfg = file(NVM_Cfg_Dir, 'w+')

NVM_MAP_TABLE_Dir = './../gen/NVM_MAP_TABLE.xls'
NVM_MAP_TABLE_filename = 'NVM_MAP_TABLE.xls'
# NVM_MAP_TABLE = file(NVM_MAP_TABLE_Dir, 'w+')
S19DataMapList = file('S19DataMapList.py', 'w+')


def WriteNowTime():
    now = datetime.datetime.now()
    return now.strftime("%Y-%m-%d %H:%M:%S")

def GenExcelCommonAnnotation(worksheet, filename, style):
    worksheet.write(0, 5, '/*****************************************************************************\n', style)
    worksheet.write(1, 5, '**  Project       BAIC C51E Cluster Project\n', style)
    worksheet.write(2, 5, '**  (c) copyright ' + datetime.datetime.now().strftime("%Y") + '\n', style)
    worksheet.write(3, 5, '**  Company       O-film\n', style)
    worksheet.write(4, 5, '**                All rights reserved\n', style)
    worksheet.write(5, 5, '**  Secrecy Level STRICTLY CONFIDENTIAL\n', style)
    worksheet.write(6, 5, '*******************************************************************************\n', style)
    worksheet.write(7, 5, '**\n', style)
    worksheet.write(8, 5, '**          File  : ' + filename + '\n', style)
    worksheet.write(9, 5, '**          Author: niujianlong\n', style)
    worksheet.write(10, 5, '**\n', style)
    worksheet.write(11, 5, '**          Date  : ' + WriteNowTime() + '\n', style)
    worksheet.write(12, 5, '**          Description: modified by the open software\n', style)
    WarningColorStyle = xlwt.easyxf('pattern: pattern solid, fore_colour red; font: bold on;')
    worksheet.write(13, 5, '**          Warning :This file is generated by tool don\'t modify it manually.\n', WarningColorStyle)
    worksheet.write(14, 5, '**          version: V_0_1\n', style)
    worksheet.write(15, 5, '**\n', style)
    worksheet.write(16, 5, '******************************************************************************/\n', style)
    
def GenCommonAnnotation(File, filename):
    File.write('/*****************************************************************************\n')
    File.write('**  Project       BAIC C51E Cluster Project\n')
    File.write('**  (c) copyright ' + datetime.datetime.now().strftime("%Y") + '\n')
    File.write('**  Company       O-film\n')
    File.write('**                All rights reserved\n')
    File.write('**  Secrecy Level STRICTLY CONFIDENTIAL\n')
    File.write('*******************************************************************************\n')
    File.write('**\n')
    File.write('**          File  : ' + filename + '\n')
    File.write('**          Author: niujianlong\n')
    File.write('**\n')
    File.write('**          Date  : ' + WriteNowTime() + '\n')
    File.write('**          Description: modified by the open software\n')
    File.write('**          Warning :This file is generated by tool don\'t modify it manually.\n')
    File.write('**          version: V_0_1\n')
    File.write('**\n')
    File.write('******************************************************************************/\n')    
    

def GetNVMStartOffset(sheetName, StartOffsetRow, StartOffsetCol):
    sheet = excel.sheet_by_name(sheetName)
    offsetStr = str(sheet.cell(StartOffsetRow, StartOffsetCol).value)
    offsetStrList = offsetStr.split('+')
    sumValue = 0
    for i in offsetStrList:
        sumValue = sumValue + int(float(i))
    return sumValue
    
def GetNVMSectionSize(sheetName, StartOffsetRow, StartOffsetCol):
    return GetNVMStartOffset(sheetName, StartOffsetRow, StartOffsetCol)

def GetNVMMapID(sheetName, row, col):
    sheet = excel.sheet_by_name(sheetName)
    return str(sheet.cell(row, col).value)

def GetNVMMapType(sheetName, row, col):
    sheet = excel.sheet_by_name(sheetName)
    return str(sheet.cell(row, col).value)

def GetNVMMapResetLevel(sheetName, row, col):
    sheet = excel.sheet_by_name(sheetName)
    return int(float(sheet.cell(row, col).value))

def GetNVMMapDefaultValue(sheetName, row, col):
    sheet = excel.sheet_by_name(sheetName)
    return str(sheet.cell(row, col).value)

def int32int16Toint8(num, size):
    if size == 2:
        return str(str(hex(int(eval(num)) & 0xff)) + ',' + str(hex((int(eval(num)) & 0xff00) >> 8)))
    elif size == 4:
        return str(str(hex(int(eval(num)) & 0xff)).rstrip('L') + ',' \
              + str(hex((int(eval(num)) & 0xff00) >> 8)).rstrip('L') + ','\
              + str(hex((int(eval(num)) & 0xff0000) >> 16)).rstrip('L') + ','\
              + str(hex((int(eval(num)) & 0xff000000) >> 24)).rstrip('L'))
    else:
        print 'the argv size is illegal'
        sys.exit(-1)
        
def StringToASCII(string):
    unicodeValue = string.decode('utf-8')
    if len(unicodeValue) == len(string):
        return map(ord, string)
    else:
        print 'the string include illegal ASCII code'
        sys.exit(-1)  
             
def CalcTypeSize(Type):
    BasicTypeEnum = ['int8', 'int16', 'int32', 'string']
    TypePartList = Type.split('[')
    if TypePartList[0] not in BasicTypeEnum:
        print 'The type value is illegal'
        sys.exit(-1)
    else:
        if  TypePartList[0] == BasicTypeEnum[0] or TypePartList[0] == BasicTypeEnum[3]:
            if  len(TypePartList) == 1:
                return 1
            else:
                return 1 * int(TypePartList[1].split(']')[0])
        elif  TypePartList[0] == BasicTypeEnum[1]:
            if  len(TypePartList) == 1:
                return 2
            else:
                return 2 * int(TypePartList[1].split(']')[0])    
        elif  TypePartList[0] == BasicTypeEnum[2]:
            if  len(TypePartList) == 1:
                return 4
            else:
                return 4 * int(TypePartList[1].split(']')[0])    
        else:
            print 'Typr Error'
            sys.exit(-1)    
def WriteNVMMapID(File):
    File.write('#define NVM_ID_LIST           \\\n')
    for sheetNam in sheetName:
        # print sheetNam
        File.write('/*the MAP ID in ' + sheetNam + ' list*/\\\n')
        row = NVMMapIdStartRow
        try:
            while GetNVMMapID(sheetNam, row, NVMMapIdCol) != '':
                File.write('        ' + GetNVMMapID(sheetNam, row, NVMMapIdCol) + ',    \\\n')
                row = row + 1
        except IndexError:
            if sheetNam == sheetName[-1]:
                File.write('\n\n')
            continue  
        
def WriteDefaultValue(File):  
    File.write('#define NVM_DEFAULT_VALUES           \\\n')
    S19DataMapList.write('S19DataMapListSum =           \\\n')
    for sheetNam in sheetName:
        File.write('/*the NVM Default Value in ' + sheetNam + ' Section*/\\\n')
        row = NVMMapIdStartRow
        Each_Section_Total_Content = ['0xff'] * GetNVMSectionSize(sheetNam, SectionSizeRow, SectionSizecol)
        print len(Each_Section_Total_Content)
        try:
            while GetNVMMapID(sheetNam, row, NVMMapIdCol) != '':
                BasicTypeEnum = ['int8', 'int16', 'int32', 'string']
                Type = GetNVMMapType(sheetNam, row, NVMMapTypeCol)
                DefaultValue = GetNVMMapDefaultValue(sheetNam, row, NVMMapDefaultValueCol)
                MapID = GetNVMMapID(sheetNam, row, NVMMapIdCol)
                ValueSize = CalcTypeSize(Type)
                del Each_Section_Total_Content[0:ValueSize] 
                TypePartList = Type.split('[')
                if TypePartList[0] not in BasicTypeEnum:
                    print 'The type value is illegal'
                    sys.exit(-1)
                    '''
                if Type in BasicTypeEnum:
                    if Type == BasicTypeEnum[0]:
                        File.write('{'+hex(int(float(DefaultValue)))+'},    /*'+MapID+'*/    \\\n')
                    elif Type == BasicTypeEnum[1] or Type == BasicTypeEnum[2]:
                        File.write('{'+int32int16Toint8(DefaultValue,ValueSize)+'},    /*'+MapID+'*/    \\\n')  
                    else:
                        pass
                        
                else:'''
                if TypePartList[0] == BasicTypeEnum[0]:
                    File.write('{')
                    S19DataMapList.write('[')
                    for DefaultValue in DefaultValue:
                        File.write(DefaultValue)
                        S19DataMapList.write(DefaultValue)
                    File.write('},    /*the default for ' + MapID + '*/    \\\n') 
                    S19DataMapList.write(']+\\\n') 
                elif TypePartList[0] == BasicTypeEnum[1] :
                    File.write('{')
                    S19DataMapList.write('[')
                    DefaultValue = DefaultValue.split(',')
                    a = 0
                    b = len(DefaultValue)
                    for DefaultValue in DefaultValue:
                        if a < b - 1:
                            File.write(int32int16Toint8(DefaultValue, 2) + ',')
                            S19DataMapList.write(int32int16Toint8(DefaultValue, 2) + ',')
                        elif a == b - 1:
                            File.write(int32int16Toint8(DefaultValue, 2)) 
                            S19DataMapList.write(int32int16Toint8(DefaultValue, 2)) 
                        a = a + 1       
                    File.write('},    /*the default for ' + MapID + '*/    \\\n') 
                    S19DataMapList.write(']+\\\n') 
                elif TypePartList[0] == BasicTypeEnum[2]:
                    File.write('{')
                    S19DataMapList.write('[')
                    DefaultValue = DefaultValue.split(',')
                    a = 0
                    b = len(DefaultValue)
                    for DefaultValue in DefaultValue:
                        if a < b - 1:
                            File.write(int32int16Toint8(DefaultValue, 4) + ',')
                            S19DataMapList.write(int32int16Toint8(DefaultValue, 4) + ',')
                        elif a == b - 1:
                            File.write(int32int16Toint8(DefaultValue, 4)) 
                            S19DataMapList.write(int32int16Toint8(DefaultValue, 4)) 
                        a = a + 1
                    File.write('},    /*the default for ' + MapID + '*/    \\\n') 
                    S19DataMapList.write(']+\\\n') 
                elif TypePartList[0] == BasicTypeEnum[3]:
                    File.write('{')
                    S19DataMapList.write('[')
                    ASCIIList = StringToASCII(DefaultValue)
                    for ASCIIElem in ASCIIList:
                        File.write(str(ASCIIElem) + ',')  
                        S19DataMapList.write(str(ASCIIElem) + ',')  
                    File.write('0},    /*the default for ' + MapID + '*/    \\\n')
                    S19DataMapList.write('0]+\\\n')
                else:
                    print 'The type value is illegal'
                    sys.exit(-1)               
                row = row + 1
        except IndexError:
            a = 0
            b = len(Each_Section_Total_Content)
            print b
            File.write('{')
            S19DataMapList.write('[')
            for elem in Each_Section_Total_Content:
                if a < b - 1:
                    File.write(elem + ',')
                    S19DataMapList.write(elem + ',')
                elif a == b - 1:
                    File.write(elem) 
                    S19DataMapList.write(elem) 
                a = a + 1
            if sheetNam != sheetName[-1]:    
                File.write('},    /*the default for reversed data*/    \\\n')
                S19DataMapList.write(']+\\\n') 
            elif  sheetNam == sheetName[-1]: 
                File.write('}    /*the default for reversed data*/    \\\n')          
                S19DataMapList.write(']\\\n')   
            if sheetNam == sheetName[-1]:
                File.write('\n\n')
            continue  

def WriteNVMConfigInfo(File):
    File.write('#define NVM_CONFIG_INFO_TABLE_LIST           \\\n')
    NVM_ACTUAL_SIZE = 0
    
    for sheetNam in sheetName:
        File.write('/*the NVM Config Info in ' + sheetNam + ' Section*/\\\n')
        row = NVMMapIdStartRow
        nvmOffset = GetNVMStartOffset(sheetNam, StartOffsetRow, StartOffsetCol)
        LastValueSize = nvmOffset
        EachSectionActualSize = 0
        try:
            while GetNVMMapID(sheetNam, row, NVMMapIdCol) != '':
                Type = GetNVMMapType(sheetNam, row, NVMMapTypeCol)
                ValueSize = CalcTypeSize(Type)
                # BasicTypeEnum = ['int8', 'int16', 'int32', 'string']
                # DefaultValue = GetNVMMapDefaultValue(sheetNam, row, NVMMapDefaultValueCol)
                MapID = GetNVMMapID(sheetNam, row, NVMMapIdCol)
                ResetLevel = GetNVMMapResetLevel(sheetNam, row, NVMMapResetLevelCol)
                
                File.write('{' + str(LastValueSize) + ',    '\
                           + str(LastValueSize) + ',    '\
                           + str(ValueSize) + ',    '\
                           + str(ResetLevel) + '},'\
                           + '    /*NVM Config Info for ' + MapID + '*/    \\\n')
                
                LastValueSize = LastValueSize + ValueSize
                EachSectionActualSize = EachSectionActualSize + ValueSize
                NVM_ACTUAL_SIZE = NVM_ACTUAL_SIZE + ValueSize
                row = row + 1
        except IndexError:
            Each_Section_Actual_Size.append(EachSectionActualSize) 
            if sheetNam == sheetName[-1]:
                File.write('\n\n')
                File.write('#define  NVM_TOTAL_SIZE        (' + str(2048) + ')\n')
                File.write('#define  NVM_ACTUAL_SIZE        (' + str(NVM_ACTUAL_SIZE) + ')\n\n')
            continue   
        
def WriteSectionOffsetAndSize(File):
    i = 0
    for sheetNam in sheetName:
        File.write('#define  ' + sheetNam + '_START_OFFSET    ' + '(' + str(GetNVMStartOffset(sheetNam, StartOffsetRow, StartOffsetCol)) + ')\n')               
        File.write('#define  ' + sheetNam + '_TOTAL_SIZE    ' + '(' + str(GetNVMSectionSize(sheetNam, SectionSizeRow, SectionSizecol)) + ')\n')               
        File.write('#define  ' + sheetNam + '_ACTUAL_SIZE    ' + '(' + str(Each_Section_Actual_Size[i]) + ')\n\n') 
        i = i + 1
                      
def WriteNVMMapTable():
    workbook = xlwt.Workbook()
    worksheet = workbook.add_sheet('NVM_MAP_TABLE', cell_overwrite_ok=True)
    '''
    pattern = xlwt.Pattern() # Create the Pattern
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN # May be: NO_PATTERN, SOLID_PATTERN, or 0x00 through 0x12
    pattern.pattern_fore_colour = 7 # May be: 8 through 63. 0 = Black, 1 = White, 2 = Red, 3 = Green, 4 = Blue, 5 = Yellow, 6 = Magenta, 7 = Cyan, 16 = Maroon, 17 = Dark Green, 18 = Dark Blue, 19 = Dark Yellow , almost brown), 20 = Dark Magenta, 21 = Teal, 22 = Light Gray, 23 = Dark Gray, the list goes on...
    style = xlwt.XFStyle() # Create the Pattern
    style.pattern = pattern # Add Pattern to Style'''
    AnnotationStyle = xlwt.easyxf('pattern: pattern solid, fore_colour sea_green; font: bold on;')
    GenExcelCommonAnnotation(worksheet, NVM_MAP_TABLE_filename, AnnotationStyle)
    # workbook.save(NVM_MAP_TABLE_Dir)
    '''
    Headpattern = xlwt.Pattern()
    xlwt.easyxf()
    Headpattern.pattern_fore_colour = 4 # May be: 8 through 63. 0 = Black, 1 = White, 2 = Red, 3 = Green, 4 = Blue, 5 = Yellow, 6 = Magenta, 7 = Cyan, 16 = Maroon, 17 = Dark Green, 18 = Dark Blue, 19 = Dark Yellow , almost brown), 20 = Dark Magenta, 21 = Teal, 22 = Light Gray, 23 = Dark Gray, the list goes on...
    Headstyle = xlwt.XFStyle() # Create the Pattern
    Headstyle.pattern = pattern'''
    Headstyle = xlwt.easyxf('pattern: pattern solid, fore_colour ocean_blue; font: bold on;')
    # style.pattern.pattern_fore_colour = 4
    worksheet.write(18, 1, 'ID', Headstyle)
    worksheet.write(18, 2, 'NVM OFFSET', Headstyle)
    worksheet.write(18, 3, 'RAM OFFSET', Headstyle)
    worksheet.write(18, 4, 'Size', Headstyle)
    worksheet.write(18, 5, 'RAM Address', Headstyle)
    worksheet.write(18, 6, 'NVM Address', Headstyle)
    worksheet.write(18, 7, 'Reset Level', Headstyle)
    worksheet.write(18, 8, 'Default Value', Headstyle)
    worksheet.write(18, 9, 'Section', Headstyle)
    Tablerow = 19
    HeadstyleColor = ['rose', 'cyan_ega', 'ice_blue', 'lime', 'pink']
    for sheetNam in sheetName:
        Headstyle = xlwt.easyxf('pattern: pattern solid, fore_colour ' + HeadstyleColor.pop() + '; font: bold on;')
        row = NVMMapIdStartRow
        nvmOffset = GetNVMStartOffset(sheetNam, StartOffsetRow, StartOffsetCol)
        LastValueSize = nvmOffset
        EachSectionActualSize = 0
        try:
            while GetNVMMapID(sheetNam, row, NVMMapIdCol) != '':
                Type = GetNVMMapType(sheetNam, row, NVMMapTypeCol)
                ValueSize = CalcTypeSize(Type)
                # BasicTypeEnum = ['int8', 'int16', 'int32', 'string']
                DefaultValue = GetNVMMapDefaultValue(sheetNam, row, NVMMapDefaultValueCol)
                MapID = GetNVMMapID(sheetNam, row, NVMMapIdCol)
                ResetLevel = GetNVMMapResetLevel(sheetNam, row, NVMMapResetLevelCol)
                worksheet.write(Tablerow, 1, MapID, Headstyle)
                worksheet.write(Tablerow, 2, str(LastValueSize), Headstyle)
                worksheet.write(Tablerow, 3, str(LastValueSize), Headstyle)
                worksheet.write(Tablerow, 4, str(ValueSize), Headstyle)
                worksheet.write(Tablerow, 5, str(hex(0x3FCE4000 + LastValueSize)), Headstyle)
                worksheet.write(Tablerow, 6, str(hex(0x0000 + LastValueSize)), Headstyle)
                worksheet.write(Tablerow, 7, str(ResetLevel), Headstyle)
                worksheet.write(Tablerow, 8, DefaultValue, Headstyle)
                worksheet.write(Tablerow, 9, sheetNam, Headstyle)
                
                LastValueSize = LastValueSize + ValueSize
                EachSectionActualSize = EachSectionActualSize + ValueSize
                # NVM_ACTUAL_SIZE = NVM_ACTUAL_SIZE + ValueSize
                row = row + 1
                Tablerow = Tablerow + 1
        except IndexError:
            # Each_Section_Actual_Size.append(EachSectionActualSize) 
            if sheetNam == sheetName[-1]:
                pass
            continue 
    workbook.save(NVM_MAP_TABLE_Dir)



def main():
    GenCommonAnnotation(NVM_Cfg, NVM_Cfg_filename)
    WriteNVMMapID(NVM_Cfg)
    WriteDefaultValue(NVM_Cfg)
    WriteNVMConfigInfo(NVM_Cfg)
    WriteSectionOffsetAndSize(NVM_Cfg)
    WriteNVMMapTable()


if __name__ == '__main__':
    main()
    # print GetNVMMapDefaultValue('ConstNvmMapSection', 7, 4)
    # print int(eval('256.0'))
    # print int32int16Toint8('0x6', 4)
    # print map(ord, '\0')
    print StringToASCII('abc')
