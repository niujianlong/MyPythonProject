#!/usr/bin/python
# -*- coding:utf8 -*-

import sys
import xlrd
import datetime

def  main():
    # Read vehicle variants configure information from excel file
    pio_filename = ur'.\Port_Cfg.h'
    dio_filename = ur'.\Dio_Cfg.h'
    #port_filename = ur'.\Port.h'
    #Dio_H_filename = ur'.\Dio.h'
    filename = './C53F_Pin_IO_Config.xlsx'
    excel = xlrd.open_workbook(filename)
    sheet = excel.sheet_by_name(ur'RH850_F1L_100Pin_IO_Config')
    fw = open(pio_filename, 'w+')
    fdio_w = open(dio_filename, 'w+')
    #fpor_w = open(port_filename, 'w+')
    #fdio_h_w = open(Dio_H_filename, 'w+')
    
    now = datetime.datetime.now()
    
    fw.write('/******************************************************************************\n')
    fw.write('**  (c) copyright 2016\n')   
    fw.write('**  Company       O-film\n')    
    fw.write('**                All rights reserved\n')    
    fw.write('**  Secrecy Level STRICTLY CONFIDENTIAL\n')    
    fw.write('*******************************************************************************\n')
    fw.write('**\n')
    fw.write('**          File  : Port_Cfg.h\n')
    fw.write('**          Description: RH850_F1L_100Pin port IO configuration file, generated by tool automatically.\n')   
    fw.write('**                           Don\'t modify it manually.\n')      
    fw.write('**          Author:  jiangyuchang\n')
    fw.write('**          Porting: niujianlong\n')
    fw.write('**\n')
    # fw.write('**          Date  : %s-%s-%s\n'%(now.year,now.month,now.day))   
    fw.write('**          Date  : %s\n' % (now.strftime("%Y-%m-%d %H:%M:%S")))    
    fw.write('**\n')
    fw.write('**\n')
    fw.write('******************************************************************************/\n')
    fw.write('#ifndef PORT_CFG_H\n')
    fw.write('#define PORT_CFG_H\n')
    fw.write('\n')
    fw.write('/******************************************************************************\n')
    fw.write('**    INCLUDES\n')
    fw.write('******************************************************************************/\n')
    fw.write('#include "board.h"\n')
    fw.write('#include "device.h"\n')
    fw.write('\n')
    fw.write('\n')
    
    fw.write('/******************************************************************************\n')   
    fw.write('**    MACROS\n')
    fw.write('******************************************************************************/\n')    

    fdio_w.write('/******************************************************************************\n')
    fdio_w.write('**  (c) copyright 2016\n')   
    fdio_w.write('**  Company       O-film\n')    
    fdio_w.write('**                All rights reserved\n')    
    fdio_w.write('**  Secrecy Level STRICTLY CONFIDENTIAL\n')    
    fdio_w.write('*******************************************************************************\n')
    fdio_w.write('**\n')
    fdio_w.write('**          File  : Dio_Cfg.h\n')
    fdio_w.write('**          Description: RH850_F1L_100Pin digital IO configuration file, generated by tool automatically.\n')   
    fdio_w.write('**                           Don\'t modify it manually.\n')      
    fdio_w.write('**          Author:  jiangyuchang\n')
    fdio_w.write('**          Porting: niujianlong\n')
    fdio_w.write('**\n')
    # fdio_w.write('**          Date  : %s-%s-%s\n'%(now.year,now.month,now.day))   
    fdio_w.write('**          Date  : %s\n' % (now.strftime("%Y-%m-%d %H:%M:%S")))    
    fdio_w.write('**\n')
    fdio_w.write('**\n')
    fdio_w.write('******************************************************************************/\n')
    fdio_w.write('#ifndef DIO_CFG_H\n')
    fdio_w.write('#define DIO_CFG_H\n')
    fdio_w.write('\n')
    fdio_w.write('/******************************************************************************\n')
    fdio_w.write('**    INCLUDES\n')
    fdio_w.write('******************************************************************************/\n')
    fdio_w.write('#include "board.h"\n')
    fdio_w.write('#include "device.h"\n')
    fdio_w.write('\n')
    fdio_w.write('\n')
    
    fdio_w.write('/******************************************************************************\n')   
    fdio_w.write('**    MACROS\n')
    fdio_w.write('******************************************************************************/\n')  

    
    port0_start_index = 11
    port0_end_index = 26
    port8_start_index = 30
    port8_end_index = 43
    port9_start_index = 47
    port9_end_index = 54
    port10_start_index = 58
    port10_end_index = 74
    port11_start_index = 78
    port11_end_index = 86
    
    jp0_start_index = 90
    jp0_end_index = 96
    ap0_start_index = 100
    ap0_end_index = 116
   
    
  

    registers = ('PMC', 'PM', 'PU', 'P', 'PIPC', 'PFCAE', 'PFCE', 'PFC', 'PBDC', 'PD', 'PIBC')
    # add by njl for gen RH850 Port Init Register List
    PortGroup = (0, 8, 9, 10, 11, 12, 13)
    
    fun_start_index = (3, 15)
    fun_list = ('INIT', 'SLEEP') 
    '''
    # add by njl for gen RH850 Port Init and sleep Register List
    fpor_w.write('/************************************************************************\n**\n** Description:     RH850 D1M1H Port Init Register List generated by tool\n**                  automatically  Don\'t modify it manually.\n** Author:          niujianlong\n** Generated Date:  ' + str(now.strftime("%Y-%m-%d %H:%M:%S")) + '\n************************************************************************/\n#define      PORT_INIT_REG16_LIST \\\n')
    fdio_h_w.write('/************************************************************************\n**\n** Description:     RH850 D1M1H PORT_DIO_REG16_LIST generated by tool\n**                  automatically  Don\'t modify it manually.\n** Author:          niujianlong\n** Generated Date:  ' + str(now.strftime("%Y-%m-%d %H:%M:%S")) + '\n************************************************************************/\n#define      PORT_DIO_REG16_LIST \\\n')
    for index in range(0, 2): 
        if index == 1:
            fpor_w.write('/************************************************************************\n**\n** Description:     RH850 D1M1H Port Sleep Register List generated by tool\n**                  automatically  Don\'t modify it manually.\n** Author:          niujianlong\n** Generated Date:  ' + str(now.strftime("%Y-%m-%d %H:%M:%S")) + '\n************************************************************************/\n#define      PORT_SLEEP_REG16_LIST \\\n')  
        for port_num in PortGroup:
            if index == 1:
                if port_num == 12: 
                    fdio_h_w.write('{ JPORT' + str(port_num - 12) + ' ,    (uint16*)(&JP' + str(port_num - 12) + ') ,    (uint16*)(&JPPR' + str(port_num - 12) + ') }, \\\n')
                elif port_num == 13:
                    fdio_h_w.write('{ APORT' + str(port_num - 13) + ' ,    (uint16*)(&AP' + str(port_num - 13) + ') ,    (uint16*)(&APPR' + str(port_num - 13) + ') }, \\\n')
                else:
                    fdio_h_w.write('{ PORT' + str(port_num) + ' ,    (uint16*)(&P' + str(port_num) + ') ,    (uint16*)(&PPR' + str(port_num) + ') }, \\\n') 
            
            for reg_name in registers:
                if port_num == 12:
                    fpor_w.write('{ (uint16 *) &J' + reg_name + str(port_num - 12) + ' ,    (uint16)(J' + reg_name + str(port_num - 12) + '_' + fun_list[index] + ') }, \\\n')    
                elif port_num == 13:
                    fpor_w.write('{ (uint16 *) &A' + reg_name + str(port_num - 13) + ' ,    (uint16)(A' + reg_name + str(port_num - 13) + '_' + fun_list[index] + ') }, \\\n')
                else:
                    fpor_w.write('{ (uint16 *) &' + reg_name + str(port_num) + ' ,    (uint16)(' + reg_name + str(port_num) + '_' + fun_list[index] + ') }, \\\n')
            
       '''         
    # Port registers configuration
    for index in range(0, 2):
        fw.write('\n')    
        fw.write('/*****************PORT GROUP 0 %s CONFIGURATION**********************/\n' % fun_list[index])            
        for col in range(fun_start_index[index], fun_start_index[index] + 11):
            value = 0;    
            for row in range(port0_start_index, port0_end_index):
                if ((1 != int(sheet.cell(row, col).value)) and (0 != int(sheet.cell(row, col).value))):
                    print 'The config value is illegal, the config value must be 0 or 1.'
                    sys.exit(-1)
                # print '%d'%(int(sheet.cell(row,col).value))
                value = value | ((int(sheet.cell(row, col).value)) << (row - port0_start_index))
            # print '%d'%value    
            first, seecond, third, fourth = dec_to_hex(value)      
            strline = '#define       %s0_%s                            ' % (registers[col - fun_start_index[index]], fun_list[index]) + '(0x%X%X%X%Xu)\n' % (first, seecond, third, fourth)
            fw.write(strline)

        fw.write('\n')    
        fw.write('/*****************PORT GROUP 8 %s CONFIGURATION**********************/\n' % fun_list[index])    
        for col in range(fun_start_index[index], fun_start_index[index] + 11):
            value = 0;    
            for row in range(port8_start_index, port8_end_index):
                if ((1 != int(sheet.cell(row, col).value)) and (0 != int(sheet.cell(row, col).value))):
                    print 'The config value is illegal, the config value must be 0 or 1.'
                    sys.exit(-1)
                # print '%d'%(int(sheet.cell(row,col).value))
                value = value | ((int(sheet.cell(row, col).value)) << (row - port8_start_index))
            # print '%d'%value    
            first, seecond, third, fourth = dec_to_hex(value)      
            strline = '#define       %s8_%s                            ' % (registers[col - fun_start_index[index]], fun_list[index]) + '(0x%X%X%X%Xu)\n' % (first, seecond, third, fourth)
            fw.write(strline)

        fw.write('\n')    
        fw.write('/*****************PORT GROUP 9 %s CONFIGURATION**********************/\n' % fun_list[index])        
        for col in range(fun_start_index[index], fun_start_index[index] + 11):
            value = 0;    
            for row in range(port9_start_index, port9_end_index):
                if ((1 != int(sheet.cell(row, col).value)) and (0 != int(sheet.cell(row, col).value))):
                    print 'The config value is illegal, the config value must be 0 or 1.'
                    sys.exit(-1)
                # print '%d'%(int(sheet.cell(row,col).value))
                value = value | ((int(sheet.cell(row, col).value)) << (row - port9_start_index))
            # print '%d'%value    
            first, seecond, third, fourth = dec_to_hex(value)      
            strline = '#define       %s9_%s                            ' % (registers[col - fun_start_index[index]], fun_list[index]) + '(0x%X%X%X%Xu)\n' % (first, seecond, third, fourth)
            fw.write(strline)

        fw.write('\n')    
        fw.write('/*****************PORT GROUP 10 %s CONFIGURATION**********************/\n' % fun_list[index])        
        for col in range(fun_start_index[index], fun_start_index[index] + 11):
            value = 0;    
            for row in range(port10_start_index, port10_end_index):
                if ((1 != int(sheet.cell(row, col).value)) and (0 != int(sheet.cell(row, col).value))):
                    print 'The config value is illegal, the config value must be 0 or 1.'
                    sys.exit(-1)
                # print '%d'%(int(sheet.cell(row,col).value))
                value = value | ((int(sheet.cell(row, col).value)) << (row - port10_start_index))
            # print '%d'%value    
            first, seecond, third, fourth = dec_to_hex(value)      
            strline = '#define       %s10_%s                            ' % (registers[col - fun_start_index[index]], fun_list[index]) + '(0x%X%X%X%Xu)\n' % (first, seecond, third, fourth)
            fw.write(strline)

        fw.write('\n')    
        fw.write('/*****************PORT GROUP 11 %s CONFIGURATION**********************/\n' % fun_list[index])        
        for col in range(fun_start_index[index], fun_start_index[index] + 11):
            value = 0;    
            for row in range(port11_start_index, port11_end_index):
                if ((1 != int(sheet.cell(row, col).value)) and (0 != int(sheet.cell(row, col).value))):
                    print 'The config value is illegal, the config value must be 0 or 1.'
                    sys.exit(-1)
                # print '%d'%(int(sheet.cell(row,col).value))
                value = value | ((int(sheet.cell(row, col).value)) << (row - port11_start_index))
            # print '%d'%value    
            first, seecond, third, fourth = dec_to_hex(value)      
            strline = '#define       %s11_%s                            ' % (registers[col - fun_start_index[index]], fun_list[index]) + '(0x%X%X%X%Xu)\n' % (first, seecond, third, fourth)
            fw.write(strline)
            
        fw.write('\n')    
            
           
        fw.write('/*****************JPORT GROUP 0 %s CONFIGURATION**********************/\n' % fun_list[index])        
        for col in range(fun_start_index[index], fun_start_index[index] + 11):
            value = 0;    
            for row in range(jp0_start_index, jp0_end_index):
                if ((1 != int(sheet.cell(row, col).value)) and (0 != int(sheet.cell(row, col).value))):
                    print 'The config value is illegal, the config value must be 0 or 1.'
                    sys.exit(-1)
                # print '%d'%(int(sheet.cell(row,col).value))
                value = value | ((int(sheet.cell(row, col).value)) << (row - jp0_start_index))
            # print '%d'%value    
            first, seecond, third, fourth = dec_to_hex(value)      
            strline = '#define       J%s0_%s                            ' % (registers[col - fun_start_index[index]], fun_list[index]) + '(0x%X%X%X%Xu)\n' % (first, seecond, third, fourth)
            fw.write(strline)
           
        fw.write('\n')    
        fw.write('/*****************APORT GROUP 0 %s CONFIGURATION**********************/\n' % fun_list[index])        
        for col in range(fun_start_index[index], fun_start_index[index] + 11):
            value = 0;    
            for row in range(ap0_start_index, ap0_end_index):
                if ((1 != int(sheet.cell(row, col).value)) and (0 != int(sheet.cell(row, col).value))):
                    print 'The config value is illegal, the config value must be 0 or 1.'
                    sys.exit(-1)
                # print '%d'%(int(sheet.cell(row,col).value))
                value = value | ((int(sheet.cell(row, col).value)) << (row - ap0_start_index))
            # print '%d'%value    
            first, seecond, third, fourth = dec_to_hex(value)      
            strline = '#define       A%s0_%s                            ' % (registers[col - fun_start_index[index]], fun_list[index]) + '(0x%X%X%X%Xu)\n' % (first, seecond, third, fourth)
            fw.write(strline)    
    #***************************************************gen the MACRO  ****************************************************************************       
    fw.write('\n')    
    fw.write('\n')
    fw.write('/*****************PORT DIRECTION SETTING**********************/\n')  
    fdio_w.write('\n')    
    fdio_w.write('/***********PORT 0 GROUP PORT BIT OPERATION***********/\n')     
    for col in range(2, 3):
        value = 0;
        i = 0;  # add for port.h
        '''
        fpor_w.write('/***************************************************************************\n**\n** Description:     RH850 D1M1H Port Pin Register Map List generated by tool\n**                  automatically  Don\'t modify it manually.\n** Author:          niujianlong\n** Generated Date:  ' + str(now.strftime("%Y-%m-%d %H:%M:%S")) + '\n***************************************************************************/\n')
        fdio_h_w.write('/***************************************************************************\n**\n** Description:     RH850 D1M1H PIN_DIO_REG16_LIST generated by tool\n**                  automatically  Don\'t modify it manually.\n** Author:          niujianlong\n** Generated Date:  ' + str(now.strftime("%Y-%m-%d %H:%M:%S")) + '\n***************************************************************************/\n')
        fpor_w.write('#define      PORT_PIN_REG16_LIST     ' + '\\' + '\n')
        fdio_h_w.write('#define      PIN_DIO_REG16_LIST     ' + '\\' + '\n')
        '''
        for row in range(port0_start_index, port0_end_index):
            strline = '#define      %s_SET_TO_INPUT()          CLEARBIT(PMC0, BIT_%s);SETBIT(PM0, BIT_%s);SETBIT(PIBC0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port0_start_index, row - port0_start_index, row - port0_start_index)
            fw.write(strline)
            strline = '#define      %s_SET_TO_OUTPUT()          CLEARBIT(PMC0, BIT_%s);CLEARBIT(PM0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port0_start_index, row - port0_start_index)
            fw.write(strline)
            
            strline = '#define      %s_BSET_PORT()                                       SETBIT(P0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port0_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BCLR_PORT()                                       CLEARBIT(P0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port0_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BTEST_PORT()                                       TESTBIT(PPR0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port0_start_index)
            fdio_w.write(strline)
            # add by niujianlong for gen the port.h file
            PortNum = '0';
            #fpor_w.write('{ PORT' + PortNum + '_' + str(i) + ', (uint16 *) &PMC' + PortNum + ' , (uint16 *) &PM' + PortNum + ', (uint16 *) &PFC' + PortNum + ', (uint16 *) &PFCE' + PortNum + ', (uint16 *) &PIBC' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')
            #fdio_h_w.write('{ PORT' + PortNum + '_' + str(i) + ', (uint16 *) &P' + PortNum + ' , (uint16 *) &PPR' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')
            i = i + 1
            
          

    fw.write('\n')
    fdio_w.write('\n')
    fdio_w.write('/***********PORT 8 GROUP PORT BIT OPERATION***********/\n')     
    for col in range(2, 3):
        value = 0;
        i = 0  # add for port.h
        #fpor_w.write('\\\n')        
        for row in range(port8_start_index, port8_end_index):
            strline = '#define      %s_SET_TO_INPUT()          CLEARBIT(PMC8, BIT_%s);SETBIT(PM8, BIT_%s);SETBIT(PIBC8, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port8_start_index, row - port8_start_index, row - port8_start_index)
            fw.write(strline)
            strline = '#define      %s_SET_TO_OUTPUT()          CLEARBIT(PMC8, BIT_%s);CLEARBIT(PM8, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port8_start_index, row - port8_start_index)
            fw.write(strline)
            
            strline = '#define      %s_BSET_PORT()                                       SETBIT(P8, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port8_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BCLR_PORT()                                       CLEARBIT(P8, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port8_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BTEST_PORT()                                       TESTBIT(PPR8, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port8_start_index)
            fdio_w.write(strline)
            # add by niujianlong for gen the port.h file
            PortNum = '8';
            #fpor_w.write('{ PORT' + PortNum + '_' + str(i) + ', (uint16 *) &PMC' + PortNum + ' , (uint16 *) &PM' + PortNum + ', (uint16 *) &PFC' + PortNum + ', (uint16 *) &PFCE' + PortNum + ', (uint16 *) &PIBC' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')
            #fdio_h_w.write('{ PORT' + PortNum + '_' + str(i) + ', (uint16 *) &P' + PortNum + ' , (uint16 *) &PPR' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')
            i = i + 1            
    fw.write('\n')
    
    
    fw.write('\n')
    fdio_w.write('\n')
    fdio_w.write('/***********PORT 9 GROUP PORT BIT OPERATION***********/\n')     
    for col in range(2, 3):
        value = 0;
        i = 0  # add for port.h
        #fpor_w.write('\\\n')        
        for row in range(port9_start_index, port9_end_index):
            strline = '#define      %s_SET_TO_INPUT()          CLEARBIT(PMC9, BIT_%s);SETBIT(PM9, BIT_%s);SETBIT(PIBC9, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port9_start_index, row - port9_start_index, row - port9_start_index)
            fw.write(strline)
            strline = '#define      %s_SET_TO_OUTPUT()          CLEARBIT(PMC9, BIT_%s);CLEARBIT(PM9, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port9_start_index, row - port9_start_index)
            fw.write(strline)
            
            strline = '#define      %s_BSET_PORT()                                       SETBIT(P9, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port9_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BCLR_PORT()                                       CLEARBIT(P9, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port9_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BTEST_PORT()                                       TESTBIT(PPR9, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port9_start_index)
            fdio_w.write(strline)
            # add by niujianlong for gen the port.h file
            PortNum = '9';
            #fpor_w.write('{ PORT' + PortNum + '_' + str(i) + ', (uint16 *) &PMC' + PortNum + ' , (uint16 *) &PM' + PortNum + ', (uint16 *) &PFC' + PortNum + ', (uint16 *) &PFCE' + PortNum + ', (uint16 *) &PIBC' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')
            #fdio_h_w.write('{ PORT' + PortNum + '_' + str(i) + ', (uint16 *) &P' + PortNum + ' , (uint16 *) &PPR' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')
            i = i + 1            
    fw.write('\n')

    fdio_w.write('\n')
    fdio_w.write('/***********PORT 10 GROUP PORT BIT OPERATION***********/\n')     
    for col in range(2, 3):
        value = 0;
        i = 0  # add for port.h
        #fpor_w.write('\\\n')    
        for row in range(port10_start_index, port10_end_index):
            
            strline = '#define      %s_SET_TO_INPUT()          CLEARBIT(PMC10, BIT_%s);SETBIT(PM10, BIT_%s);SETBIT(PIBC10, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port10_start_index, row - port10_start_index, row - port10_start_index)
            fw.write(strline)
            strline = '#define      %s_SET_TO_OUTPUT()          CLEARBIT(PMC10, BIT_%s);CLEARBIT(PM10, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port10_start_index, row - port10_start_index)
            fw.write(strline)
            
            strline = '#define      %s_BSET_PORT()                                       SETBIT(P10, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port10_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BCLR_PORT()                                       CLEARBIT(P10, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port10_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BTEST_PORT()                                       TESTBIT(PPR10, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port10_start_index)
            fdio_w.write(strline)
            # add by niujianlong for gen the port.h file
            PortNum = '10';
            #fpor_w.write('{ PORT' + PortNum + '_' + str(i) + ', (uint16 *) &PMC' + PortNum + ' , (uint16 *) &PM' + PortNum + ', (uint16 *) &PFC' + PortNum + ', (uint16 *) &PFCE' + PortNum + ', (uint16 *) &PIBC' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')
            #fdio_h_w.write('{ PORT' + PortNum + '_' + str(i) + ', (uint16 *) &P' + PortNum + ' , (uint16 *) &PPR' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')            
            i = i + 1 
    fw.write('\n')
    fdio_w.write('\n')
    fdio_w.write('/***********PORT 11 GROUP PORT BIT OPERATION***********/\n')     
    for col in range(2, 3):
        value = 0;
        # add for port.h
        i = 0 
        #fpor_w.write('\\\n')    
        for row in range(port11_start_index, port11_end_index):
            strline = '#define      %s_SET_TO_INPUT()          CLEARBIT(PMC11, BIT_%s);SETBIT(PM11, BIT_%s);SETBIT(PIBC11, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port11_start_index, row - port11_start_index, row - port11_start_index)
            fw.write(strline)
            strline = '#define      %s_SET_TO_OUTPUT()          CLEARBIT(PMC11, BIT_%s);CLEARBIT(PM11, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port11_start_index, row - port11_start_index)
            fw.write(strline)
                 
            strline = '#define      %s_BSET_PORT()                                       SETBIT(P11, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port11_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BCLR_PORT()                                       CLEARBIT(P11, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port11_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BTEST_PORT()                                       TESTBIT(PPR11, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port11_start_index)
            fdio_w.write(strline)
            # add by niujianlong for gen the port.h file
            PortNum = '11';
            #fpor_w.write('{ PORT' + PortNum + '_' + str(i) + ', (uint16 *) &PMC' + PortNum + ' , (uint16 *) &PM' + PortNum + ', (uint16 *) &PFC' + PortNum + ', (uint16 *) NULL, (uint16 *) &PIBC' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')
            #fdio_h_w.write('{ PORT' + PortNum + '_' + str(i) + ', (uint16 *) &P' + PortNum + ' , (uint16 *) &PPR' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')            
            i = i + 1 
    fw.write('\n')
    fdio_w.write('\n')
    
    fw.write('\n')    
    fdio_w.write('\n')
    fdio_w.write('/***********JPORT 0 GROUP PORT BIT OPERATION***********/\n')        
    for col in range(2, 3):
        value = 0;    
        # add for port.h
        i = 0 
        #fpor_w.write('\\\n')   
        for row in range(jp0_start_index, jp0_end_index):
            strline = '#define      %s_SET_TO_INPUT()          CLEARBIT(JPMC0, BIT_%s);SETBIT(JPM0, BIT_%s);SETBIT(JPIBC0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - jp0_start_index, row - jp0_start_index, row - jp0_start_index)
            fw.write(strline)
            strline = '#define      %s_SET_TO_OUTPUT()          CLEARBIT(JPMC0, BIT_%s);CLEARBIT(JPM0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - jp0_start_index, row - jp0_start_index)
            fw.write(strline)
                 
            strline = '#define      %s_BSET_PORT()                                       SETBIT(JP0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - jp0_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BCLR_PORT()                                       CLEARBIT(JP0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - jp0_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BTEST_PORT()                                       TESTBIT(JPPR0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - jp0_start_index)
            fdio_w.write(strline)
            # add by niujianlong for gen the port.h file
            PortNum = '0';
            #fpor_w.write('{ JPORT' + PortNum + '_' + str(i) + ', (uint16 *) &JPMC' + PortNum + ' , (uint16 *) &JPM' + PortNum + ', (uint16 *) &JPFC' + PortNum + ', (uint16 *) &JPFCE' + PortNum + ', (uint16 *) &JPIBC' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')
            #fdio_h_w.write('{ JPORT' + PortNum + '_' + str(i) + ', (uint16 *) &JP' + PortNum + ' , (uint16 *) &JPPR' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')            
            i = i + 1
    
    fw.write('\n')    
    fdio_w.write('\n')
    fdio_w.write('/***********APORT 0 GROUP PORT BIT OPERATION***********/\n')        
    for col in range(2, 3):
        value = 0;    
        # add for port.h
        i = 0 
        #fpor_w.write('\\\n')   
        for row in range(ap0_start_index, ap0_end_index):
            strline = '#define      %s_SET_TO_INPUT()          CLEARBIT(APMC0, BIT_%s);SETBIT(APM0, BIT_%s);SETBIT(APIBC0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - ap0_start_index, row - ap0_start_index, row - ap0_start_index)
            fw.write(strline)
            strline = '#define      %s_SET_TO_OUTPUT()          CLEARBIT(APMC0, BIT_%s);CLEARBIT(APM0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - ap0_start_index, row - ap0_start_index)
            fw.write(strline)
                 
            strline = '#define      %s_BSET_PORT()                                       SETBIT(AP0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - ap0_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BCLR_PORT()                                       CLEARBIT(AP0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - ap0_start_index)
            fdio_w.write(strline)
            strline = '#define      %s_BTEST_PORT()                                       TESTBIT(APPR0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - ap0_start_index)
            fdio_w.write(strline)
            # add by niujianlong for gen the port.h file
            PortNum = '0';
            #fpor_w.write('{ APORT' + PortNum + '_' + str(i) + ', (uint16 *) &APMC' + PortNum + ' , (uint16 *) &APM' + PortNum + ', (uint16 *) &APFC' + PortNum + ', (uint16 *) &APFCE' + PortNum + ', (uint16 *) &APIBC' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')
            #fdio_h_w.write('{ APORT' + PortNum + '_' + str(i) + ', (uint16 *) &AP' + PortNum + ' , (uint16 *) &APPR' + PortNum + ',  (uint16)(BIT_' + str(i) + ')   }, ' + '\\' + '\n')            
            i = i + 1
    # generate dio dbnc configuration information
    debounce_array = ('DIO_00', 'DIO_01', 'DIO_02', 'DIO_03', 'DIO_04', 'DIO_05', 'DIO_06', 'DIO_07', \
                      'DIO_08', 'DIO_09', 'DIO_10', 'DIO_11', 'DIO_12', 'DIO_13', 'DIO_14', 'DIO_15', \
                      'DIO_16', 'DIO_17', 'DIO_18', 'DIO_19', 'DIO_20', 'DIO_21', 'DIO_22', 'DIO_23', \
                      'DIO_24', 'DIO_25', 'DIO_26', 'DIO_27', 'DIO_28', 'DIO_29', 'DIO_30', 'DIO_31')
                      
    fdio_w.write('\n')
    fdio_w.write('\n')                      
    fdio_w.write('/*************DIO DBNC CONFIGURATION**************/\n')
    
    b3_dbnc_init_value = 0
    b2_dbnc_init_value = 0
    b1_dbnc_init_value = 0
    b0_dbnc_init_value = 0
    
    for col in range(27, 28):
        for row in range(11, 116):
            for index in range(0, 32):
                if debounce_array[index] == str(sheet.cell(row, col).value):
                    if row >= port0_start_index and row < port0_end_index:
                        strline = '#define %s_SET_TO_INPUT()              CLEARBIT(PMC0,BIT_%s);SETBIT(PM0,BIT_%s);SETBIT(PIBC0,BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port0_start_index, row - port0_start_index, row - port0_start_index)
                        fdio_w.write(strline)
                        strline = '#define %s_BTEST_PORT()              TESTBIT(PPR0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port0_start_index)
                        fdio_w.write(strline)

                    if row >= port8_start_index and row < port8_end_index:
                        strline = '#define %s_SET_TO_INPUT()              CLEARBIT(PMC8,BIT_%s);SETBIT(PM8,BIT_%s);SETBIT(PIBC8,BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port8_start_index, row - port8_start_index, row - port8_start_index)
                        fdio_w.write(strline)
                        strline = '#define %s_BTEST_PORT()              TESTBIT(PPR8, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port8_start_index)
                        fdio_w.write(strline)

                    if row >= port9_start_index and row < port9_end_index:
                        strline = '#define %s_SET_TO_INPUT()              CLEARBIT(PMC9,BIT_%s);SETBIT(PM9,BIT_%s);SETBIT(PIBC9,BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port9_start_index, row - port9_start_index, row - port9_start_index)
                        fdio_w.write(strline)
                        strline = '#define %s_BTEST_PORT()              TESTBIT(PPR9, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port9_start_index)
                        fdio_w.write(strline)

                    if row >= port10_start_index and row < port10_end_index:
                        strline = '#define %s_SET_TO_INPUT()              CLEARBIT(PMC10,BIT_%s);SETBIT(PM10,BIT_%s);SETBIT(PIBC10,BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port10_start_index, row - port10_start_index, row - port10_start_index)
                        fdio_w.write(strline)
                        strline = '#define %s_BTEST_PORT()              TESTBIT(PPR10, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port10_start_index)
                        fdio_w.write(strline)

                    if row >= port11_start_index and row < port11_end_index:
                        strline = '#define %s_SET_TO_INPUT()              CLEARBIT(PMC11,BIT_%s);SETBIT(PM11,BIT_%s);SETBIT(PIBC11,BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port11_start_index, row - port11_start_index, row - port11_start_index)
                        fdio_w.write(strline)
                        strline = '#define %s_BTEST_PORT()              TESTBIT(PPR11, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - port11_start_index)
                        fdio_w.write(strline)

                    if row >= jp0_start_index and row < jp0_end_index:
                        strline = '#define %s_SET_TO_INPUT()              CLEARBIT(JPMC0,BIT_%s);SETBIT(JPMC0,BIT_%s);SETBIT(JPIBC0,BIT_%s)\n' % (str(sheet.cell(row, col).value), row - jp0_start_index, row - jp0_start_index, row - jp0_start_index)
                        fdio_w.write(strline)
                        strline = '#define %s_BTEST_PORT()              TESTBIT(JPPR0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - jp0_start_index)
                        fdio_w.write(strline)   
                         
                    if row >= ap0_start_index and row < ap0_end_index:
                        strline = '#define %s_SET_TO_INPUT()              CLEARBIT(APMC0,BIT_%s);SETBIT(APMC0,BIT_%s);SETBIT(APIBC0,BIT_%s)\n' % (str(sheet.cell(row, col).value), row - ap0_start_index, row - ap0_start_index, row - ap0_start_index)
                        fdio_w.write(strline)
                        strline = '#define %s_BTEST_PORT()              TESTBIT(APPR0, BIT_%s)\n' % (str(sheet.cell(row, col).value), row - ap0_start_index)
                        fdio_w.write(strline)    
                        
                    strline = '#define %s_DBNC_CHANNEL              %s_DBNC_CHANNEL\n' % (str(sheet.cell(row, 2).value), str(sheet.cell(row, col).value))
                    fdio_w.write(strline)
                    strline = '#define %s_BTEST_DBNC_PORT()              Dio_getDbncState(%s_DBNC_CHANNEL)\n' % (str(sheet.cell(row, 2).value), str(sheet.cell(row, 2).value))
                    fdio_w.write(strline)
                        
                                                                                           
                    if int(sheet.cell(row, col + 1).value) < 0 or int(sheet.cell(row, col + 1).value) > 16:
                        print('Please input legal debounce number which should be betweeen 0 and 16.')
                        sys.exit(-1)
                    else:
                        dbnc_num = int(sheet.cell(row, col + 1).value)
                    
                    if (16 - dbnc_num) & 0x8 != 0:
                        b3_dbnc_init_value = b3_dbnc_init_value | (1 << index)
                    if (16 - dbnc_num) & 0x4 != 0:
                        b2_dbnc_init_value = b2_dbnc_init_value | (1 << index)                        
                    if (16 - dbnc_num) & 0x2 != 0:
                        b1_dbnc_init_value = b1_dbnc_init_value | (1 << index)                    
                    if (16 - dbnc_num) & 0x1 != 0:
                        b0_dbnc_init_value = b0_dbnc_init_value | (1 << index)

        fdio_w.write('\n')
        fdio_w.write('#define DIO_DBNC_INIT_COUNTER_BIT0    (%d)\n' % (b0_dbnc_init_value))
        fdio_w.write('#define DIO_DBNC_INIT_COUNTER_BIT1    (%d)\n' % (b1_dbnc_init_value))
        fdio_w.write('#define DIO_DBNC_INIT_COUNTER_BIT2    (%d)\n' % (b2_dbnc_init_value))
        fdio_w.write('#define DIO_DBNC_INIT_COUNTER_BIT3    (%d)\n' % (b3_dbnc_init_value))
                        
    fw.write('\n') 
    fw.write('/**************END OF PORT DIRECTION SETTING******************/\n')   
    fw.write('#endif\n')    
    fw.write('\n')
    fw.write('/**************************************End Of File******************************************/\n')

    fdio_w.write('\n')
    fdio_w.write('/*************END OF DIO DBNC CONFIGURATION**************/\n')      
    fdio_w.write('#endif\n')    
    fdio_w.write('\n')
    fdio_w.write('/**************************************End Of File******************************************/\n')

               
    
    fw.close()
    fdio_w.close()
    #fdio_h_w.close()
    #fpor_w.close()
        
def dec_to_hex(value):
    first_byte = value / (16 * 16 * 16)
    second_byte = (value - first_byte * 16 * 16 * 16) / (16 * 16)
    third_byte = (value - first_byte * 16 * 16 * 16 - second_byte * 16 * 16) / 16
    fourth_byte = value - first_byte * 16 * 16 * 16 - second_byte * 16 * 16 - third_byte * 16
    return (first_byte, second_byte, third_byte, fourth_byte)
    
def get_port_number(sheet, row):  # 这个函数就是为了获取第二列中的P100中的10这个数字,但是对于C53F这样P1013的怎么识别呢？
    PortNum = str(sheet.cell(row, 1).value).split('(')[1].split(')')[0];
        # print str(sheet.cell(row,1).value).split('(')[1].split(')')[0]
    PortNum = filter(str.isdigit, PortNum)  # filter函数筛选出来字符串中的数字返回一个列表
    if len(PortNum) == 2:
        PortNum = PortNum[0] 
    elif len(PortNum) == 3:
        if PortNum[0] in [0, 8, 9]:  # P10之前的还是取前一位就可以了
            PortNum = PortNum[0]    
        else:  # P10之后的要取前2位才行 比如P101
            PortNum = PortNum[0:2]     
    elif len(PortNum) == 4:
        PortNum = PortNum[0:2]
    return PortNum
if __name__ == '__main__':
    main()
  
